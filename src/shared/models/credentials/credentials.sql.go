// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: credentials.sql

package credentials

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCredential = `-- name: GetCredential :one
SELECT webauthn_credentials.credential_id, webauthn_credentials.user_id, webauthn_credentials.use_counter, webauthn_credentials.public_key, webauthn_credentials.attestation_type, webauthn_credentials.transport, webauthn_credentials.flags, webauthn_credentials.authenticator, webauthn_credentials.attestation, webauthn_users._id, webauthn_users.ref_id, webauthn_users.raw_id, webauthn_users.name, webauthn_users.display_name
FROM webauthn_credentials
INNER JOIN webauthn_users ON webauthn_credentials.user_id = webauthn_users._id
WHERE credential_id = $1
`

type GetCredentialRow struct {
	WebauthnCredential WebauthnCredential
	WebauthnUser       WebauthnUser
}

func (q *Queries) GetCredential(ctx context.Context, credentialID []byte) (GetCredentialRow, error) {
	row := q.db.QueryRow(ctx, getCredential, credentialID)
	var i GetCredentialRow
	err := row.Scan(
		&i.WebauthnCredential.CredentialID,
		&i.WebauthnCredential.UserID,
		&i.WebauthnCredential.UseCounter,
		&i.WebauthnCredential.PublicKey,
		&i.WebauthnCredential.AttestationType,
		&i.WebauthnCredential.Transport,
		&i.WebauthnCredential.Flags,
		&i.WebauthnCredential.Authenticator,
		&i.WebauthnCredential.Attestation,
		&i.WebauthnUser.ID,
		&i.WebauthnUser.RefID,
		&i.WebauthnUser.RawID,
		&i.WebauthnUser.Name,
		&i.WebauthnUser.DisplayName,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT _id, ref_id, raw_id, name, display_name
FROM webauthn_users
WHERE _id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, ID int64) (WebauthnUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, ID)
	var i WebauthnUser
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.RawID,
		&i.Name,
		&i.DisplayName,
	)
	return i, err
}

const getUserByRef = `-- name: GetUserByRef :one
SELECT _id, ref_id, raw_id, name, display_name
FROM webauthn_users
WHERE ref_id = $1
`

func (q *Queries) GetUserByRef(ctx context.Context, refID string) (WebauthnUser, error) {
	row := q.db.QueryRow(ctx, getUserByRef, refID)
	var i WebauthnUser
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.RawID,
		&i.Name,
		&i.DisplayName,
	)
	return i, err
}

const incrementCredentialUseCounter = `-- name: IncrementCredentialUseCounter :one
UPDATE webauthn_credentials
SET use_counter = use_counter + 1
WHERE credential_id = $1
RETURNING use_counter
`

func (q *Queries) IncrementCredentialUseCounter(ctx context.Context, credentialID []byte) (int32, error) {
	row := q.db.QueryRow(ctx, incrementCredentialUseCounter, credentialID)
	var use_counter int32
	err := row.Scan(&use_counter)
	return use_counter, err
}

const insertCredential = `-- name: InsertCredential :one
INSERT INTO webauthn_credentials (
    "credential_id", "user_id", "public_key", "attestation_type", "transport", "flags", "authenticator", "attestation"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING credential_id, user_id, use_counter, public_key, attestation_type, transport, flags, authenticator, attestation
`

type InsertCredentialParams struct {
	CredentialID    []byte
	UserID          pgtype.Int8
	PublicKey       []byte
	AttestationType pgtype.Text
	Transport       []byte
	Flags           []byte
	Authenticator   []byte
	Attestation     []byte
}

func (q *Queries) InsertCredential(ctx context.Context, arg InsertCredentialParams) (WebauthnCredential, error) {
	row := q.db.QueryRow(ctx, insertCredential,
		arg.CredentialID,
		arg.UserID,
		arg.PublicKey,
		arg.AttestationType,
		arg.Transport,
		arg.Flags,
		arg.Authenticator,
		arg.Attestation,
	)
	var i WebauthnCredential
	err := row.Scan(
		&i.CredentialID,
		&i.UserID,
		&i.UseCounter,
		&i.PublicKey,
		&i.AttestationType,
		&i.Transport,
		&i.Flags,
		&i.Authenticator,
		&i.Attestation,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO webauthn_users (
    "ref_id", "raw_id", "name", "display_name"
) VALUES (
    $1, $2, $3, $4
) RETURNING _id, ref_id, raw_id, name, display_name
`

type InsertUserParams struct {
	RefID       string
	RawID       []byte
	Name        string
	DisplayName string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (WebauthnUser, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.RefID,
		arg.RawID,
		arg.Name,
		arg.DisplayName,
	)
	var i WebauthnUser
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.RawID,
		&i.Name,
		&i.DisplayName,
	)
	return i, err
}

const listCredentialsByUser = `-- name: ListCredentialsByUser :many
SELECT credential_id, user_id, use_counter, public_key, attestation_type, transport, flags, authenticator, attestation
FROM webauthn_credentials
WHERE user_id = $1
ORDER BY credential_id
`

func (q *Queries) ListCredentialsByUser(ctx context.Context, userID pgtype.Int8) ([]WebauthnCredential, error) {
	rows, err := q.db.Query(ctx, listCredentialsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebauthnCredential
	for rows.Next() {
		var i WebauthnCredential
		if err := rows.Scan(
			&i.CredentialID,
			&i.UserID,
			&i.UseCounter,
			&i.PublicKey,
			&i.AttestationType,
			&i.Transport,
			&i.Flags,
			&i.Authenticator,
			&i.Attestation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT _id, ref_id, raw_id, name, display_name
FROM webauthn_users
`

func (q *Queries) ListUsers(ctx context.Context) ([]WebauthnUser, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebauthnUser
	for rows.Next() {
		var i WebauthnUser
		if err := rows.Scan(
			&i.ID,
			&i.RefID,
			&i.RawID,
			&i.Name,
			&i.DisplayName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE webauthn_users
SET "name" = $2, display_name = $3
WHERE ref_id = $1
RETURNING _id, ref_id, raw_id, name, display_name
`

type UpdateUserParams struct {
	RefID       string
	Name        string
	DisplayName string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (WebauthnUser, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.RefID, arg.Name, arg.DisplayName)
	var i WebauthnUser
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.RawID,
		&i.Name,
		&i.DisplayName,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO webauthn_users (
    "ref_id", "raw_id", "name", "display_name"
) VALUES (
    $1, $2, $3, $4
)
ON CONFLICT (ref_id)
DO UPDATE set ref_id = EXCLUDED.ref_id
RETURNING _id, ref_id, raw_id, name, display_name
`

type UpsertUserParams struct {
	RefID       string
	RawID       []byte
	Name        string
	DisplayName string
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (WebauthnUser, error) {
	row := q.db.QueryRow(ctx, upsertUser,
		arg.RefID,
		arg.RawID,
		arg.Name,
		arg.DisplayName,
	)
	var i WebauthnUser
	err := row.Scan(
		&i.ID,
		&i.RefID,
		&i.RawID,
		&i.Name,
		&i.DisplayName,
	)
	return i, err
}
